{
    "pipes": [],
    "interfaces": [
        {
            "name": "Currency",
            "id": "interface-Currency-34264e8ddb2ca13fa96fb8888d4071a6dbd95e386e62b5caeaafa882c5a63b4740f2d8ef491597e15b9e7dbbb58477fa2fba1b2eb9b6efa3756759d56e4cbbb2",
            "file": "src/app/interfaces/currency.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Currency {\r\n    id: string\r\n    rank: string;\r\n    symbol: string;\r\n    name: string;\r\n    supply: string;\r\n    maxSupply: string;\r\n    marketCapUsd?: string;\r\n    volumeUsd24Hr?: string;\r\n    priceUsd?: string;\r\n    changePercent24Hr?: string;\r\n    vwap24Hr?: string;\r\n    explorer?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "changePercent24Hr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "explorer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "marketCapUsd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "maxSupply",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "priceUsd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "supply",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "volumeUsd24Hr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "vwap24Hr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataResponse",
            "id": "interface-DataResponse-807d69a1aec49aa7a2a13d37b0c4c2d914f8f5c7068016bd4e9e4a18db4afdb9892fdeb221b01fd5bde7ed9a1f9ae4f8c6ac0157bc567e72f4e06bc6d482fdba",
            "file": "src/app/interfaces/data-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DataResponse {\r\n    error?: number;\r\n    data: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "File",
            "id": "interface-File-b81615eb9ce2840721ffe8fea1a0f6b8db36ab370b86de498155201787afb903cee0da01d4cebe54065ac97f59bab15fa14f8b8441c209a8d0ef0bee5d6e8245",
            "file": "src/app/interfaces/file.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface File {\r\n    id?: number;\r\n    name: string;\r\n    device: string;\r\n    path: string;\r\n    status: FileStatus;\r\n}\r\n\r\nexport enum FileStatus {\r\n    Scheduled = \"scheduled\",\r\n    Available = \"available\",\r\n    Unknown = \"unknown\",\r\n}\r\n",
            "properties": [
                {
                    "name": "device",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileStatus",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CurrencyService",
            "id": "injectable-CurrencyService-d945a42ac48a60aad043fd6057821976780d324801e6d8eb0b27f7feeba11de18b9a46a89de5f707af65b6c15eb4ac253926548bb98585d2aa327552a2ae9b92",
            "file": "src/app/services/currency/currency.service.ts",
            "properties": [
                {
                    "name": "auth",
                    "defaultValue": "getAuth()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "collectionPortfolio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollectionReference<any>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "db",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "getCurrencies",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"\""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Array<Currency>>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "\"\"",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrency",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Currency>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPortfolio",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeCryptoFromPortfolio",
                    "args": [
                        {
                            "name": "cryptoId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cryptoId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveCryptoToPortfolio",
                    "args": [
                        {
                            "name": "cryptoId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cryptoId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveNewPortfolio",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { map } from 'rxjs/operators';\r\nimport { Currency } from '../../interfaces/currency.model';\r\nimport { Firestore, collectionData, collection, query, where, CollectionReference, deleteField } from '@angular/fire/firestore';\r\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CurrencyService {\r\n  auth = getAuth();\r\n  db: any\r\n\r\n  collectionPortfolio: CollectionReference<any>\r\n\r\n  constructor(firestore: Firestore, private http: HttpClient, db: AngularFirestore) {\r\n    this.db = db\r\n    this.collectionPortfolio = collection(firestore, 'portfolio')\r\n  }\r\n\r\n  getPortfolio(): Observable<any> {\r\n    return collectionData(query(this.collectionPortfolio, where('__name__', '==' , this.auth.currentUser?.uid)))\r\n  }\r\n\r\n  saveNewPortfolio(): void {\r\n    this.db.collection('portfolio').doc(this.auth.currentUser?.uid).set({})\r\n  }\r\n\r\n  saveCryptoToPortfolio(cryptoId: string): void {\r\n    this.db.collection('portfolio').doc(this.auth.currentUser?.uid).set({[cryptoId]: 1}, { merge: true })\r\n  }\r\n\r\n  removeCryptoFromPortfolio(cryptoId: string): void {\r\n    this.db.collection('portfolio').doc(this.auth.currentUser?.uid).set({[cryptoId]: deleteField()}, { merge: true })\r\n  }\r\n\r\n  getCurrency(id: string): Observable<Currency> {\r\n    return this.http\r\n      .get<{ data: Currency }>(`https://api.coincap.io/v2/assets/${id}`)\r\n      .pipe(map((currencies) => currencies.data));\r\n  }\r\n\r\n  getCurrencies(searchTerm = \"\"): Observable<Array<Currency>> {\r\n    return this.http\r\n      .get<{ data: Currency[] }>(`https://api.coincap.io/v2/assets?search=${searchTerm}&limit=2000`)\r\n      .pipe(map((currencies) => currencies.data || []));\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "firestore",
                        "type": "Firestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "db",
                        "type": "AngularFirestore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FilesService",
            "id": "injectable-FilesService-3d243571ccb05ae5da9121690552c79b54f3d8cb84d88f1c546a0ed63782b1416f683969e97853592ba9b617dd7b126cabe83e8c2af1737fd73eafbd54c09042",
            "file": "src/app/services/files/files.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<File[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, Observable } from 'rxjs';\r\nimport { DataResponse } from '../../interfaces/data-response';\r\nimport { File } from '../../interfaces/file';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FilesService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getFiles(): Observable<File[]>\r\n  {\r\n    const url = './assets/data/files.json';\r\n\r\n    // @TODO: Should have error handling\r\n    return this.http.get<DataResponse>(url).pipe(map((res: DataResponse) => {return res.data}));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c371ebfa4158a481ec2eea91536eb64e412e80eb91a7e1455511cd89f1e594f6478e2ebf9d2d18ce96ba4e023232b2e2dce6dd409eded3d7277a709b4290b4c1",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "angularFireAuth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AngularFireAuth",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "newPortfolioSubscription",
                    "defaultValue": "new Subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "'Homework Web Site'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "errorLoginCallback",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "successLoginCallback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { Subscription } from 'rxjs';\r\nimport { CurrencyService } from './services/currency/currency.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: 'app.component.html',\r\n})\r\nexport class AppComponent implements OnDestroy {\r\n  title = 'Homework Web Site';\r\n\r\n  newPortfolioSubscription: Subscription = new Subscription;\r\n\r\n  constructor(public angularFireAuth: AngularFireAuth, private currencyService: CurrencyService,) {}\r\n\r\n  ngOnDestroy() {\r\n    this.newPortfolioSubscription.unsubscribe()\r\n  }\r\n\r\n  successLoginCallback(): void {\r\n    // TODO: Fix this worse code ever. Move this, use a store action\r\n    // NOTE: authResult: any, redirectUrl: string\r\n    this.newPortfolioSubscription = this.currencyService.getPortfolio().subscribe(e => {\r\n      if (e.length === 0) {\r\n        this.currencyService.saveNewPortfolio()\r\n      }\r\n    })\r\n  }\r\n\r\n  // TODO: Use this, log failure\r\n  errorLoginCallback(event: any): void {\r\n    console.error(event)\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "angularFireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currencyService",
                        "type": "CurrencyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "angularFireAuth",
                        "type": "AngularFireAuth",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currencyService",
                        "type": "CurrencyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<style>\r\n  .content {\r\n    display: flex;\r\n    margin: 82px auto 32px;\r\n    padding: 0 16px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n\r\n  .toolbar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    height: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: #1976d2;\r\n    color: white;\r\n    font-weight: 600;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  footer {\r\n    margin-top: 8px;\r\n    display: flex;\r\n    align-items: center;\r\n    line-height: 20px;\r\n  }\r\n\r\n  img#clouds {\r\n    position: fixed;\r\n    bottom: -160px;\r\n    left: -230px;\r\n    z-index: -10;\r\n    width: 1920px;\r\n  }\r\n</style>\r\n\r\n<div class=\"content\">\r\n  <!-- TODO: Horrible code below. Remove inline styles and real banner comp should be made -->\r\n  <div *ngIf=\"angularFireAuth.user | async as user; else loggedoutbanner\" class=\"toolbar\" role=\"banner\" style=\"display: flex; justify-content: space-between; padding: 1rem; color: white;\">\r\n    <div>\r\n      <a [routerLink]=\"['/files']\" style=\"margin-right: 1rem;\">File Downloads</a>\r\n      <a [routerLink]=\"['/crypto']\">Crypto Portfolio</a>\r\n    </div>\r\n    <h1>{{ title }}</h1>\r\n    <div><a (click)=\"angularFireAuth.signOut();\" style=\"cursor: pointer;\">Logout</a></div>\r\n  </div>\r\n  <ng-template #loggedoutbanner>\r\n    <div>\r\n      <h1>{{ title }}</h1>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <div *ngIf=\"angularFireAuth.user | async as user; else login\" style=\"width: 100%;\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n  <ng-template #login>\r\n      <firebase-ui (signInSuccessWithAuthResult)=\"successLoginCallback\" (signInFailure)=\"errorLoginCallback($event)\"></firebase-ui>\r\n  </ng-template>\r\n\r\n  <img id=\"clouds\" src=\"assets/svgs/clouds.svg\" alt=\"\" />\r\n</div>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-61175254144b00d5c0bac2565c4f029ababb972d914a3de364473c8c5388eb5d620e729248db0667eff794ca2a439faeffcc5f097ee7dfb43404ebbfc64af136",
            "file": "src/app/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "MultiCheckboxState",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "stateChanged",
                    "defaultValue": "new EventEmitter<MultiCheckboxState>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changeState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when the state of the checkbox is changed\n\n",
                    "description": "<p>Fires when the state of the checkbox is changed</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 618,
                                "end": 625,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": "void"
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { MultiCheckboxState } from './checkbox.model';\r\n\r\n@Component({\r\n  selector: 'home-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss']\r\n})\r\nexport class CheckboxComponent implements OnInit {\r\n  @Input() state!: MultiCheckboxState;\r\n  @Output() stateChanged = new EventEmitter<MultiCheckboxState>();\r\n\r\n  ngOnInit() {\r\n    if (this.state == null) {\r\n      this.state = MultiCheckboxState.Empty;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fires when the state of the checkbox is changed\r\n   *\r\n   * @returns {void}\r\n   * @memberof CheckboxComponent\r\n   */\r\n   changeState(): void {\r\n    this.stateChanged.emit(this.state);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/styles.scss';\r\n\r\n:host {\r\n    .full, .partial, .empty {\r\n        cursor: pointer;\r\n        height: 20px;\r\n        width: 20px;\r\n        box-shadow: 0 2px 4px 0 rgba(173,181,189,0.23);\r\n        border-radius: 50%;\r\n    }\r\n\r\n    .full {\r\n        background: $app-color-primary;\r\n    }\r\n\r\n    .partial {\r\n        border-width: 3px;\r\n        border-color: $app-color-primary;\r\n        border-style: solid;\r\n    }\r\n\r\n    .empty {\r\n        border-width: 3px;\r\n        border-color: gray;\r\n        border-style: solid;\r\n    }\r\n}",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [class]=\"state\" (click)=\"changeState()\"></div>"
        },
        {
            "name": "CryptoComponent",
            "id": "component-CryptoComponent-0414f26eb6d42ce12dace20501c3e000f4c771906e263529ffd13d91d9868c4117a061ae699aee442033ff90aab8cd59265947dd269957c6be1e433a2ea89581",
            "file": "src/app/pages/crypto/crypto.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "page-crypto",
            "styleUrls": [
                "./crypto.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./crypto.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allCryptosSubscription",
                    "defaultValue": "new Subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currencies$",
                    "defaultValue": "this.store.select(selectCurrencies)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currencyPortfolio$",
                    "defaultValue": "this.store.select(selectPortfolio)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "portfolioSubscription",
                    "defaultValue": "new Subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdd",
                    "args": [
                        {
                            "name": "currency",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currency",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "currency",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currency",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subscription } from 'rxjs';\r\nimport { Currency } from 'src/app/interfaces/currency.model';\r\nimport { CurrencyService } from '../../services/currency/currency.service';\r\nimport { CurrenciesApiActions, CurrencyActions } from '../../state/currencies.actions';\r\nimport { selectCurrencies, selectPortfolio } from '../../state/currencies.selectors';\r\n\r\n@Component({\r\n  selector: 'page-crypto',\r\n  templateUrl: './crypto.component.html',\r\n  styleUrls: ['./crypto.component.scss']\r\n})\r\nexport class CryptoComponent implements OnInit, OnDestroy {\r\n    subscriptions: Subscription[] = [];\r\n    allCryptosSubscription: Subscription = new Subscription;\r\n    portfolioSubscription: Subscription = new Subscription;\r\n\r\n    currencies$ = this.store.select(selectCurrencies);\r\n    currencyPortfolio$ = this.store.select(selectPortfolio);\r\n\r\n    constructor(private store: Store, private currencyService: CurrencyService) {}\r\n\r\n    ngOnInit() {\r\n      this.allCryptosSubscription = this.currencyService\r\n        .getCurrencies()\r\n        .subscribe((currencies) => {\r\n            currencies = currencies.sort((a, b) => (a.name > b.name) ? 1 : -1)\r\n\r\n            this.store.dispatch(CurrenciesApiActions.retrievedCurrencies({ currencies }))\r\n          },\r\n          error => {\r\n            console.error('CryptoComponent - ngOnInit: ', error);\r\n          }\r\n        )\r\n\r\n      this.portfolioSubscription = this.currencyService.getPortfolio().subscribe(e => {\r\n          if (e.length > 0) {\r\n            // NOTE: Only one portfolio for a user right now, grab the first/only\r\n            Object.keys(e[0]).forEach((cs: string) => {\r\n              this.currencyService.getCurrency(cs).subscribe(currency => {\r\n                this.store.dispatch(CurrencyActions.addCurrency({ currency }));\r\n              })\r\n            })\r\n          }\r\n      })\r\n\r\n      this.subscriptions.push(this.allCryptosSubscription);\r\n      this.subscriptions.push(this.portfolioSubscription);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n      this.subscriptions.forEach(sub => sub.unsubscribe());\r\n    }\r\n\r\n    onAdd(currency: Currency) {\r\n      // TODO: Check for error, alert user, don't update the store\r\n      this.currencyService.saveCryptoToPortfolio(currency.id)\r\n      this.store.dispatch(CurrencyActions.addCurrency({ currency }));\r\n    }\r\n\r\n    onRemove(currency: Currency) {\r\n      // TODO: Check for error, alert user, don't update the store\r\n      this.currencyService.removeCryptoFromPortfolio(currency.id)\r\n      this.store.dispatch(CurrencyActions.removeCurrency({ currency }));\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/overrides.scss';\r\n\r\n:host {\r\n    width: 100%;\r\n\r\n    .crypto-table {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        width: 100%;\r\n\r\n        div {\r\n            padding: 1rem;\r\n\r\n            div {\r\n                padding-top: .25rem;\r\n            }\r\n        }\r\n\r\n        h2 {\r\n            font-size: medium;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./crypto.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "currencyService",
                        "type": "CurrencyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currencyService",
                        "type": "CurrencyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div>\r\n    <h1>Crypto Tracker</h1>\r\n\r\n    <div class=\"crypto-table\">\r\n        <div style=\"width: 20%\">\r\n            <h2>Available Cryptocurrencies</h2>\r\n\r\n            <home-crypto-selector [currencies]=\"(currencies$ | async)!\" (add)=\"onAdd($event)\"></home-crypto-selector>\r\n        </div>\r\n\r\n        <div>\r\n            <h2>Portfolio</h2>\r\n\r\n            <home-crypto-portfolio [currencies]=\"(currencyPortfolio$ | async)!\" (remove)=\"onRemove($event)\"></home-crypto-portfolio>\r\n        </div>\r\n\r\n        <div style=\"width: 20%\">\r\n            <h2>Random Cryptocurrency</h2>\r\n\r\n            <home-crypto-randomizer [currencies]=\"(currencies$ | async)!\"></home-crypto-randomizer>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "CryptoPortfolioComponent",
            "id": "component-CryptoPortfolioComponent-81a5285514c82cd8a705ae700c44ed4626d28024c09f74ac58fa2e7163fcd83edad21c9926402ee32ab96d3935de02664a24cb82fb1baa48e0454880a9eaf713",
            "file": "src/app/pages/crypto/crypto-portfolio/crypto-portfolio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-crypto-portfolio",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./crypto-portfolio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currencies",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "ReadonlyArray<Currency>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "remove",
                    "defaultValue": "new EventEmitter<Currency>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Currency } from 'src/app/interfaces/currency.model';\r\n\r\n@Component({\r\n  selector: 'home-crypto-portfolio',\r\n  templateUrl: './crypto-portfolio.component.html',\r\n})\r\nexport class CryptoPortfolioComponent {\r\n  @Input() currencies: ReadonlyArray<Currency> = [];\r\n  @Output() remove = new EventEmitter<Currency>();\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div>\r\n  <div *ngIf=\"currencies.length === 0\">\r\n    You have no cryptocurrencies in your portfolio\r\n  </div>\r\n\r\n  <ngx-datatable *ngIf=\"currencies.length > 0\" [rows]=\"currencies\" class=\"material light\">\r\n    <ngx-datatable-column name=\"Id\">\r\n      <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          <div>{{row.id}}</div>\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n    <ngx-datatable-column name=\"Name\">\r\n      <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          <div>{{row.name}}</div>\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n    <ngx-datatable-column name=\"Symbol\">\r\n      <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          <div>{{row.symbol}}</div>\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n    <ngx-datatable-column name=\"Remove\">\r\n      <ng-template let-row=\"row\" ngx-datatable-cell-template>\r\n          <div (click)=\"remove.emit(row)\" style=\"cursor: pointer;\">X</div>\r\n      </ng-template>\r\n    </ngx-datatable-column>\r\n  </ngx-datatable>\r\n</div>"
        },
        {
            "name": "CryptoRandomizerComponent",
            "id": "component-CryptoRandomizerComponent-1151357b9776bfc5e8239798f93276ca3bbef8a9095e3ec637e3463f2e3b649781c1b3fb163f57c5b5257361e8deb9db6a01916ff093711fc8f6ab5e7af2cd69",
            "file": "src/app/pages/crypto/crypto-randomizer/crypto-randomizer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-crypto-randomizer",
            "styleUrls": [
                "./crypto-randomizer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./crypto-randomizer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currencies",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ReadonlyArray<Currency>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "randomCryptosSubscription",
                    "defaultValue": "new Subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "randomCurrency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Currency",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit, Input } from '@angular/core';\r\nimport { of, timer, mergeMap, Subscription } from 'rxjs';\r\nimport { Currency } from 'src/app/interfaces/currency.model';\r\nimport { CurrencyService } from '../../../services/currency/currency.service';\r\n\r\n@Component({\r\n  selector: 'home-crypto-randomizer',\r\n  templateUrl: './crypto-randomizer.component.html',\r\n  styleUrls: ['./crypto-randomizer.component.scss']\r\n})\r\nexport class CryptoRandomizerComponent implements OnDestroy, OnInit {\r\n  @Input() currencies: ReadonlyArray<Currency> = [];\r\n\r\n  subscriptions: Subscription[] = [];\r\n  randomCryptosSubscription: Subscription = new Subscription;\r\n\r\n  randomCurrency: Currency\r\n\r\n  constructor(private currencyService: CurrencyService) {}\r\n\r\n  ngOnInit() {\r\n    this.randomCryptosSubscription = timer(1000, 1 * 10000).pipe(\r\n      mergeMap(() => {\r\n        if (!this.currencies.length) {\r\n          return of();\r\n        }\r\n\r\n        const r = Math.floor(Math.random() * this.currencies.length)\r\n\r\n        return this.currencyService.getCurrency(this.currencies[r].id)}\r\n      )\r\n    )\r\n    .subscribe(c => this.randomCurrency = c)\r\n\r\n    this.subscriptions.push(this.randomCryptosSubscription)\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/overrides.scss';\r\n\r\n:host {\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n",
                    "styleUrl": "./crypto-randomizer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "currencyService",
                        "type": "CurrencyService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "currencyService",
                        "type": "CurrencyService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "templateData": "<ng-container>\n    <p-progressSpinner *ngIf=\"!randomCurrency\"></p-progressSpinner>\n\n    <table *ngIf=\"randomCurrency\" style=\"width: 100%;\">\n        <thead style=\"text-align: left;\">\n            <tr>\n                <th style=\"width: 40%;\">Field</th>\n                <th>Value</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Name</td>\n                <td>{{ randomCurrency.name }}</td>\n            </tr>\n            <tr>\n                <td>Symbol</td>\n                <td>{{ randomCurrency.symbol }}</td>\n            </tr>\n            <tr>\n                <td>Market Cap (USD)</td>\n                <td *ngIf=\"randomCurrency.marketCapUsd\">{{ randomCurrency.marketCapUsd | currency: 'USD':true:'2.0'  }}</td>\n                <td *ngIf=\"!randomCurrency.marketCapUsd\">Unknown</td>\n            </tr>\n        </tbody>\n    </table>\n</ng-container>"
        },
        {
            "name": "CryptoSelectorComponent",
            "id": "component-CryptoSelectorComponent-69c095ab6b19967a2dce6df2ddc666c657d14da08e81f49b82b2498e2cd8a24529c0a5ce9e95361615c60cf75f5e277175f75da29563beec660d881989199328",
            "file": "src/app/pages/crypto/crypto-selector/crypto-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-crypto-selector",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./crypto-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currencies",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ReadonlyArray<Currency>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "add",
                    "defaultValue": "new EventEmitter<Currency>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cryptoIdsInPortfolio",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "currencyPortfolio$",
                    "defaultValue": "this.store.select(selectPortfolio)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "results",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Currency[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedCryptosSubscription",
                    "defaultValue": "new Subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "text",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "addCurrency",
                    "args": [
                        {
                            "name": "e",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { OnDestroy, OnInit } from '@angular/core';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Currency } from '../../../interfaces/currency.model';\r\nimport { Store } from '@ngrx/store';\r\nimport { Subscription } from 'rxjs';\r\nimport { selectPortfolio } from '../../../state/currencies.selectors';\r\n\r\n@Component({\r\n  selector: 'home-crypto-selector',\r\n  templateUrl: './crypto-selector.component.html'\r\n})\r\nexport class CryptoSelectorComponent implements OnDestroy, OnInit {\r\n  @Input() currencies: ReadonlyArray<Currency> = [];\r\n  @Output() add = new EventEmitter<Currency>();\r\n\r\n  currencyPortfolio$ = this.store.select(selectPortfolio);\r\n\r\n  subscriptions: Subscription[] = [];\r\n  selectedCryptosSubscription: Subscription = new Subscription;\r\n\r\n  cryptoIdsInPortfolio: string[] = []\r\n\r\n  text: any = \"\";\r\n  results: Currency[] = [];\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    this.selectedCryptosSubscription = this.currencyPortfolio$.subscribe(cc => {\r\n      this.cryptoIdsInPortfolio = cc.map(c => c.id)\r\n    })\r\n\r\n    this.subscriptions.push(this.selectedCryptosSubscription);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  search(event: any) {\r\n    const searchTerm = event.query.trim().toLowerCase()\r\n\r\n    // NOTE: Could filter off more fields with \"keys\", but id, name and symbol more or less cover it\r\n    this.results = this.currencies.filter(c => {\r\n      return (\r\n        (\r\n          c.id.toLowerCase().indexOf(searchTerm) > -1 || c.name.toLowerCase().indexOf(searchTerm) > -1 || c.symbol.toLowerCase().indexOf(searchTerm) > -1) &&\r\n          this.cryptoIdsInPortfolio.indexOf(c.id) === -1\r\n        )\r\n    })\r\n  }\r\n\r\n  addCurrency(e: Currency) {\r\n    this.text = \"\"\r\n    this.add.emit(e)\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "templateData": "<div>\r\n    <div>\r\n        <p-autoComplete\r\n            [(ngModel)]=\"text\" [suggestions]=\"results\"\r\n            (onSelect)=\"addCurrency($event)\"\r\n            [style]=\"{'width':'100%'}\" [inputStyle]=\"{'width':'100%'}\"\r\n            (completeMethod)=\"search($event)\" field=\"name\" placeholder=\"Search for a cryptocurrency\">\r\n        </p-autoComplete>\r\n    </div>\r\n</div>"
        },
        {
            "name": "FilesComponent",
            "id": "component-FilesComponent-da91e937cd4f7574e91441db5525857d8c9d6954ea08c3fef8065de1cba353cad5ce40a4cd2948454f0c42ff2b964409c928dee691e0d0c5570132504d7725a1",
            "file": "src/app/pages/files/files.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "page-downloads",
            "styleUrls": [
                "./files.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./files.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "filesService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilesService",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "fileSubscription",
                    "defaultValue": "new Subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selectedFiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDialogDisplay",
                    "args": [
                        {
                            "name": "display",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when clicking to display the modal dialog\n\n",
                    "description": "<p>Fires when clicking to display the modal dialog</p>\n",
                    "jsdoctags": [
                        {
                            "name": "display",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1521,
                                "end": 1528,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": "void"
                        }
                    ]
                },
                {
                    "name": "handleSelectionClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "MultiCheckboxState",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when multistatte checkbox is clicked\n\n",
                    "description": "<p>Fires when multistatte checkbox is clicked</p>\n",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MultiCheckboxState",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1160,
                                "end": 1167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "",
                            "returnType": "void"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { FilesService } from '../../services/files/files.service';\r\nimport { File, FileStatus } from '../../interfaces/file';\r\nimport { MultiCheckboxState } from '../../components/checkbox/checkbox.model';\r\n\r\n@Component({\r\n  selector: 'page-downloads',\r\n  templateUrl: './files.component.html',\r\n  styleUrls: ['./files.component.scss']\r\n})\r\nexport class FilesComponent implements OnDestroy, OnInit {\r\n  subscriptions: Subscription[] = [];\r\n  fileSubscription: Subscription = new Subscription;\r\n\r\n  filesService: FilesService;\r\n  files: File[] = [];\r\n  selectedFiles: File[] = [];\r\n  showModal = false;\r\n\r\n  constructor(filesService: FilesService) {\r\n    this.filesService = filesService;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fileSubscription = this.filesService.getFiles().subscribe(response => {\r\n      this.files = response;\r\n    })\r\n\r\n    this.subscriptions.push(this.fileSubscription);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  /**\r\n   * Fires when multistatte checkbox is clicked\r\n   *\r\n   * @returns {void}\r\n   * @memberof FilesComponent\r\n   */\r\n  handleSelectionClick(e: MultiCheckboxState): void {\r\n    if (e === MultiCheckboxState.Empty || e === MultiCheckboxState.Partial) {\r\n      this.selectedFiles = this.files;\r\n    } else {\r\n      this.selectedFiles = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fires when clicking to display the modal dialog\r\n   *\r\n   * @returns {void}\r\n   * @memberof FilesComponent\r\n   */\r\n  handleDialogDisplay(display: boolean): void {\r\n    this.showModal = display;\r\n  }\r\n\r\n  /**\r\n   * The row selection state of the table\r\n   *\r\n   * @returns {MultiCheckboxState}\r\n   * @memberof FilesComponent\r\n   */\r\n  get tableState(): MultiCheckboxState {\r\n    if (this.selectedFiles.length === 0) {\r\n      return MultiCheckboxState.Empty;\r\n    }\r\n\r\n    if (this.selectedFiles.length === this.files.length) {\r\n      return MultiCheckboxState.Full;\r\n    }\r\n\r\n    return MultiCheckboxState.Partial;\r\n  }\r\n\r\n  /**\r\n   * The number of files currently selected\r\n   *\r\n   * @returns {number}\r\n   * @memberof FilesComponent\r\n   */\r\n  get selectedFileCount(): number {\r\n    return this.selectedFiles.length;\r\n  }\r\n\r\n  /**\r\n   * The number of files currently selected that are not available\r\n   *\r\n   * @returns {number}\r\n   * @memberof FilesComponent\r\n   */\r\n   get selectedUnavailableFileCount(): number {\r\n    return this.selectedFiles.filter(f => f.status !== FileStatus.Available).length;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/overrides.scss';\r\n\r\n:host {\r\n    width: 100%;\r\n\r\n    ::ng-deep .p-datatable-header > div {\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        > label {\r\n            margin-left: 1rem;\r\n        }\r\n\r\n        > div.download {\r\n            display: flex;\r\n            justify-content: center;\r\n\r\n            img {\r\n                width: 1rem;\r\n            }\r\n        }\r\n\r\n        > div {\r\n            margin-left: 2rem;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n    // NOTE: Dialog classes, should be kept seperate\r\n    .message {\r\n        font-size: small;\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    .notavailable {\r\n        color: $app-color-warning;\r\n        cursor: default !important;\r\n    }\r\n\r\n    .downloads {\r\n        display: grid;\r\n        grid-template-columns: 25% 75%;\r\n        gap: 5px;\r\n\r\n        div {\r\n            text-overflow: ellipsis;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            cursor: pointer;\r\n        }\r\n    }\r\n}\r\n",
                    "styleUrl": "./files.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "filesService",
                        "type": "FilesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "filesService",
                        "type": "FilesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "accessors": {
                "tableState": {
                    "name": "tableState",
                    "getSignature": {
                        "name": "tableState",
                        "type": "",
                        "returnType": "MultiCheckboxState",
                        "line": 67,
                        "rawdescription": "\n\nThe row selection state of the table\n\n",
                        "description": "<p>The row selection state of the table</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 1723,
                                "end": 1759,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 339,
                                "tagName": {
                                    "pos": 1724,
                                    "end": 1731,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "",
                                "typeExpression": {
                                    "pos": 1732,
                                    "end": 1752,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 307,
                                    "type": {
                                        "pos": 1733,
                                        "end": 1751,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 177,
                                        "typeName": {
                                            "pos": 1733,
                                            "end": 1751,
                                            "flags": 4194304,
                                            "modifierFlagsCache": 0,
                                            "transformFlags": 0,
                                            "kind": 79,
                                            "escapedText": "MultiCheckboxState"
                                        }
                                    }
                                }
                            },
                            {
                                "pos": 1759,
                                "end": 1788,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 325,
                                "tagName": {
                                    "pos": 1760,
                                    "end": 1768,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "memberof"
                                },
                                "comment": "<p>FilesComponent</p>\n"
                            }
                        ]
                    }
                },
                "selectedFileCount": {
                    "name": "selectedFileCount",
                    "getSignature": {
                        "name": "selectedFileCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 85,
                        "rawdescription": "\n\nThe number of files currently selected\n\n",
                        "description": "<p>The number of files currently selected</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2145,
                                "end": 2169,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 339,
                                "tagName": {
                                    "pos": 2146,
                                    "end": 2153,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "",
                                "typeExpression": {
                                    "pos": 2154,
                                    "end": 2162,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 307,
                                    "type": {
                                        "pos": 2155,
                                        "end": 2161,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 146
                                    }
                                }
                            },
                            {
                                "pos": 2169,
                                "end": 2198,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 325,
                                "tagName": {
                                    "pos": 2170,
                                    "end": 2178,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "memberof"
                                },
                                "comment": "<p>FilesComponent</p>\n"
                            }
                        ]
                    }
                },
                "selectedUnavailableFileCount": {
                    "name": "selectedUnavailableFileCount",
                    "getSignature": {
                        "name": "selectedUnavailableFileCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 95,
                        "rawdescription": "\n\nThe number of files currently selected that are not available\n\n",
                        "description": "<p>The number of files currently selected that are not available</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 2371,
                                "end": 2395,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 339,
                                "tagName": {
                                    "pos": 2372,
                                    "end": 2379,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "returns"
                                },
                                "comment": "",
                                "typeExpression": {
                                    "pos": 2380,
                                    "end": 2388,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 307,
                                    "type": {
                                        "pos": 2381,
                                        "end": 2387,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 1,
                                        "kind": 146
                                    }
                                }
                            },
                            {
                                "pos": 2395,
                                "end": 2424,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 325,
                                "tagName": {
                                    "pos": 2396,
                                    "end": 2404,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "memberof"
                                },
                                "comment": "<p>FilesComponent</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<div>\r\n    <h1>File Downloads</h1>\r\n\r\n    <p-table [value]=\"files\" selectionMode=\"multiple\" [(selection)]=\"selectedFiles\">\r\n        <ng-template pTemplate=\"caption\">\r\n            <div>\r\n                <home-checkbox [state]=\"tableState\" (stateChanged)=\"handleSelectionClick($event)\"></home-checkbox>\r\n                <label *ngIf=\"!selectedFileCount\">None Selected</label>\r\n                <label *ngIf=\"selectedFileCount\">Selected {{ selectedFileCount }}</label>\r\n                <div *ngIf=\"selectedFileCount\" class=\"download\" (click)=\"handleDialogDisplay(true)\"><img src=\"assets/svgs/download.svg\" alt=\"Download selected files\" />Download Selected</div>\r\n            </div>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"header\">\r\n            <tr>\r\n                <th></th>\r\n                <th>Name</th>\r\n                <th>Device</th>\r\n                <th>Path</th>\r\n                <th>Status</th>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"body\" let-file>\r\n            <tr [pSelectableRow]=\"file\">\r\n                <td>\r\n                    <p-tableCheckbox [value]=\"file\" (click)=\"$event.stopPropagation()\"></p-tableCheckbox>\r\n                </td>\r\n                <td>\r\n                    {{ file.name }}\r\n                </td>\r\n                <td>\r\n                    {{ file.device }}\r\n                </td>\r\n                <td>\r\n                    {{ file.path }}\r\n                </td>\r\n                <td>\r\n                    <home-status-indicator [status]=file.status></home-status-indicator>\r\n                </td>\r\n            </tr>\r\n        </ng-template>\r\n    </p-table>\r\n\r\n    <!-- @TODO: Make a component that wraps this for reusability -->\r\n    <p-dialog header=\"File Downloads\" [(visible)]=\"showModal\" [style]=\"{width: '50vw'}\" [modal]=\"true\" [draggable]=\"false\">\r\n        <!-- BUSINESSRULE: Only those that have a status of \"available\" are currently able to be downloaded. Your implementation should manage this. -->\r\n        <div  *ngIf=\"selectedUnavailableFileCount\" class=\"message\">File(s) in <span class=\"notavailable\">red</span> are not available to be downloaded.</div>\r\n\r\n        <div class=\"downloads\">\r\n            <ng-container *ngFor=\"let file of selectedFiles\">\r\n                <div title=\"{{ file.device }}\" [ngClass]=\"{'notavailable': file.status !== 'available'}\">{{ file.device }}</div>\r\n                <div *ngIf=\"file.status !== 'available'\" title=\"{{ file.path }}\" class=\"notavailable\">{{ file.path }}</div>\r\n                <div *ngIf=\"file.status === 'available'\" title=\"{{ file.path }}\"><a>{{ file.path }}</a></div>\r\n            </ng-container>\r\n        </div>\r\n        <ng-template pTemplate=\"footer\">\r\n            <p-button label=\"Close\" styleClass=\"p-button-text\" (click)=\"handleDialogDisplay(false)\"></p-button>\r\n        </ng-template>\r\n    </p-dialog>\r\n</div>\r\n"
        },
        {
            "name": "StatusIndicatorComponent",
            "id": "component-StatusIndicatorComponent-2a001662d5dc0d45fbcc20ce28c0d2c46fec16f3d655fba159319bbc963254581ff081462c4a927b1b455b106b3dae34ff358492c156f2b9eacebce5f9f3b068",
            "file": "src/app/components/status-indicator/status-indicator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "home-status-indicator",
            "styleUrls": [
                "./status-indicator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status-indicator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "status",
                    "defaultValue": "FileStatus.Unknown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "FileStatus",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FileStatus } from '../../interfaces/file';\r\n\r\n@Component({\r\n  selector: 'home-status-indicator',\r\n  templateUrl: './status-indicator.component.html',\r\n  styleUrls: ['./status-indicator.component.scss']\r\n})\r\nexport class StatusIndicatorComponent {\r\n  @Input() status: FileStatus = FileStatus.Unknown;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../styles/styles.scss';\r\n\r\n:host {\r\n    .status-indicator {\r\n        text-transform: capitalize;\r\n        display: flex;\r\n        flex-direction: row;\r\n\r\n        .indicator {\r\n            min-height: 20px;\r\n            min-width: 20px;\r\n\r\n            &.available {\r\n                background-color: $app-color-status-good;\r\n                border-radius: 50%;\r\n                display: inline-block;\r\n            }\r\n        }\r\n\r\n        label {\r\n            padding-left: 1rem;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./status-indicator.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"status-indicator\">\r\n    <span class=\"indicator\" [ngClass]=\"{'available': status === 'available'}\"></span>\r\n    <label>{{ status }}</label>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e6b784acdb3a726b09bfc37c5ad6ac53402fbd11046b106bc05bf049fb4f54a49c039931ed65c9b91f78e356e0524cbfd7c03496e86be66de6cee6b650886aab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "// NOTE: Base angular imports\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AngularFireAuthModule } from '@angular/fire/compat/auth';\r\nimport { AngularFireModule } from '@angular/fire/compat';\r\nimport { initializeApp, provideFirebaseApp } from '@angular/fire/app';\r\nimport { provideFirestore,getFirestore } from '@angular/fire/firestore';\r\n\r\n// NOTE: Third party imports\r\nimport { FirebaseUIModule, firebase, firebaseui } from 'firebaseui-angular';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { NgxDatatableModule } from '@swimlane/ngx-datatable';\r\n\r\n// NOTE: Common, reusable items\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { CommonModule } from './common.module';\r\n\r\nimport { CheckboxComponent } from './components/checkbox/checkbox.component';\r\nimport { StatusIndicatorComponent } from './components/status-indicator/status-indicator.component';\r\n\r\n// NOTE: Application specific\r\nimport { CryptoComponent } from './pages/crypto/crypto.component';\r\nimport { CryptoRandomizerComponent } from './pages/crypto/crypto-randomizer/crypto-randomizer.component';\r\nimport { CryptoSelectorComponent } from './pages/crypto/crypto-selector/crypto-selector.component';\r\nimport { CryptoPortfolioComponent } from './pages/crypto/crypto-portfolio/crypto-portfolio.component';\r\nimport { currencyReducer } from './state/currencies.reducer';\r\nimport { portfolioReducer } from './state/portfolio.reducer';\r\n\r\nimport { FilesComponent } from './pages/files/files.component';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\nexport const firebaseUiAuthConfig: firebaseui.auth.Config = {\r\n  signInFlow: 'popup',\r\n  signInOptions: [\r\n    {\r\n      requireDisplayName: false,\r\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n    },\r\n  ],\r\n  //term of service\r\n  tosUrl: '<your-tos-link>',\r\n  //privacy url\r\n  privacyPolicyUrl: '<your-privacyPolicyUrl-link>',\r\n  //credentialHelper:             firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM\r\n  credentialHelper: firebaseui.auth.CredentialHelper.NONE\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CheckboxComponent,\r\n    FilesComponent,\r\n    StatusIndicatorComponent,\r\n    CryptoSelectorComponent,\r\n    CryptoPortfolioComponent,\r\n    CryptoComponent,\r\n    CryptoRandomizerComponent\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    NgxDatatableModule,\r\n    StoreModule.forRoot({ currencies: currencyReducer, portfolio: portfolioReducer }),\r\n    AngularFireModule.initializeApp(environment.firebaseConfig),\r\n    AngularFireAuthModule,\r\n    FirebaseUIModule.forRoot(firebaseUiAuthConfig),\r\n    provideFirebaseApp(() => initializeApp(environment.firebaseConfig)),\r\n    provideFirestore(() => getFirestore()),\r\n  ],\r\n  providers: [],\r\n  exports: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "CryptoComponent"
                        },
                        {
                            "name": "CryptoPortfolioComponent"
                        },
                        {
                            "name": "CryptoRandomizerComponent"
                        },
                        {
                            "name": "CryptoSelectorComponent"
                        },
                        {
                            "name": "FilesComponent"
                        },
                        {
                            "name": "StatusIndicatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CommonModule"
                        },
                        {
                            "name": "provideFirebaseApp(() => initializeApp(environment"
                        },
                        {
                            "name": "provideFirestore(() => getFirestore())"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-57a32e60c855904f9ba9e5261f22a56d5df44cf4ba503bb41d951de33fa974826c640e47a94ad93d21bfea2d435f05ce74bdb5a15f8be04195d14a5b99b9d590",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FilesComponent } from './pages/files/files.component'\nimport { CryptoComponent } from './pages/crypto/crypto.component'\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/crypto', pathMatch: 'full' },\n  {\n    path: 'crypto',\n    component: CryptoComponent,\n    pathMatch: 'full'\n  },\n  {\n    path: 'files',\n    component: FilesComponent,\n    pathMatch: 'full'\n  },\n]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CommonModule",
            "id": "module-CommonModule-1c02500be56215a8a4bf98829a2421d61df71d4ebf5b655ef93e3dc214fa70e1ae07f32f1f776b87628ee8de561679cc0c20fe91a8f308723841180cd076c125",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/common.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\n\r\nimport { AutoCompleteModule } from 'primeng/autocomplete';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { TableModule } from 'primeng/table';\r\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AutoCompleteModule,\r\n    ButtonModule,\r\n    DialogModule,\r\n    ProgressSpinnerModule,\r\n    TableModule,\r\n  ],\r\n  declarations: [],\r\n  providers: [],\r\n  exports: [\r\n    AutoCompleteModule,\r\n    ButtonModule,\r\n    DialogModule,\r\n    ProgressSpinnerModule,\r\n    TableModule,\r\n  ]\r\n})\r\nexport class CommonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CurrenciesApiActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/currencies.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n  source: 'Cryptocurrency API',\r\n  events: {'Retrieved currencies': props<{ currencies: ReadonlyArray<Currency> }>()},\r\n})"
            },
            {
                "name": "CurrencyActions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/currencies.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createActionGroup({\r\n  source: 'Currencies',\r\n  events: {\r\n    'Add Currency': props<{ currency: Currency }>(),\r\n    'Remove Currency': props<{ currency: Currency }>(),\r\n  },\r\n})"
            },
            {
                "name": "currencyReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/currencies.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(CurrenciesApiActions.retrievedCurrencies, (_state, { currencies }) => currencies)\r\n)"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyAKqYEYfgbqJWGG3wxDcEdbhio3GKoP6yQ\",\r\n    authDomain: \"homework-c5efc.firebaseapp.com\",\r\n    projectId: \"homework-c5efc\",\r\n    storageBucket: \"homework-c5efc.appspot.com\",\r\n    messagingSenderId: \"1084922941630\",\r\n    appId: \"1:1084922941630:web:de38b3ca0caa199aa5ceef\",\r\n    measurementId: \"G-XG8VTVVQXF\"\r\n  }\r\n}"
            },
            {
                "name": "firebaseUiAuthConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "firebaseui.auth.Config",
                "defaultValue": "{\r\n  signInFlow: 'popup',\r\n  signInOptions: [\r\n    {\r\n      requireDisplayName: false,\r\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n    },\r\n  ],\r\n  //term of service\r\n  tosUrl: '<your-tos-link>',\r\n  //privacy url\r\n  privacyPolicyUrl: '<your-privacyPolicyUrl-link>',\r\n  //credentialHelper:             firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM\r\n  credentialHelper: firebaseui.auth.CredentialHelper.NONE\r\n}"
            },
            {
                "name": "Full",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/currencies.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ReadonlyArray<Currency>",
                "defaultValue": "[]"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/portfolio.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ReadonlyArray<Currency>",
                "defaultValue": "[]"
            },
            {
                "name": "Partial",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "portfolioReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/portfolio.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(CurrencyActions.removeCurrency, (state, { currency }) =>\r\n    state.filter((c) => c.id !== currency.id)\r\n  ),\r\n  on(CurrencyActions.addCurrency, (state, { currency }) => {\r\n    if (state.map(c => c.id).indexOf(currency.id) > -1) return state;\r\n\r\n    return [...state, currency];\r\n  })\r\n)"
            },
            {
                "name": "selectCurrencies",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/currencies.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ReadonlyArray<Currency>>('currencies')"
            },
            {
                "name": "selectPortfolio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/currencies.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ReadonlyArray<Currency>>('portfolio')"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/checkbox/checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "FileStatus",
                "childs": [
                    {
                        "name": "Scheduled",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "scheduled"
                    },
                    {
                        "name": "Available",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "available"
                    },
                    {
                        "name": "Unknown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "unknown"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/interfaces/file.ts"
            },
            {
                "name": "MultiCheckboxState",
                "childs": [
                    {
                        "name": "Empty",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "empty"
                    },
                    {
                        "name": "Disabled",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "disabled"
                    },
                    {
                        "name": "Full",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "full"
                    },
                    {
                        "name": "Partial",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "partial"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/checkbox/checkbox.model.ts"
            }
        ],
        "groupedVariables": {
            "src/app/state/currencies.actions.ts": [
                {
                    "name": "CurrenciesApiActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/currencies.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n  source: 'Cryptocurrency API',\r\n  events: {'Retrieved currencies': props<{ currencies: ReadonlyArray<Currency> }>()},\r\n})"
                },
                {
                    "name": "CurrencyActions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/currencies.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createActionGroup({\r\n  source: 'Currencies',\r\n  events: {\r\n    'Add Currency': props<{ currency: Currency }>(),\r\n    'Remove Currency': props<{ currency: Currency }>(),\r\n  },\r\n})"
                }
            ],
            "src/app/state/currencies.reducer.ts": [
                {
                    "name": "currencyReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/currencies.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(CurrenciesApiActions.retrievedCurrencies, (_state, { currencies }) => currencies)\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/currencies.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<Currency>",
                    "defaultValue": "[]"
                }
            ],
            "src/app/components/checkbox/checkbox.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Full",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Partial",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/checkbox/checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  firebaseConfig: {\r\n    apiKey: \"AIzaSyAKqYEYfgbqJWGG3wxDcEdbhio3GKoP6yQ\",\r\n    authDomain: \"homework-c5efc.firebaseapp.com\",\r\n    projectId: \"homework-c5efc\",\r\n    storageBucket: \"homework-c5efc.appspot.com\",\r\n    messagingSenderId: \"1084922941630\",\r\n    appId: \"1:1084922941630:web:de38b3ca0caa199aa5ceef\",\r\n    measurementId: \"G-XG8VTVVQXF\"\r\n  }\r\n}"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "firebaseUiAuthConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "firebaseui.auth.Config",
                    "defaultValue": "{\r\n  signInFlow: 'popup',\r\n  signInOptions: [\r\n    {\r\n      requireDisplayName: false,\r\n      provider: firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n    },\r\n  ],\r\n  //term of service\r\n  tosUrl: '<your-tos-link>',\r\n  //privacy url\r\n  privacyPolicyUrl: '<your-privacyPolicyUrl-link>',\r\n  //credentialHelper:             firebaseui.auth.CredentialHelper.ACCOUNT_CHOOSER_COM\r\n  credentialHelper: firebaseui.auth.CredentialHelper.NONE\r\n}"
                }
            ],
            "src/app/state/portfolio.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/portfolio.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<Currency>",
                    "defaultValue": "[]"
                },
                {
                    "name": "portfolioReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/portfolio.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(CurrencyActions.removeCurrency, (state, { currency }) =>\r\n    state.filter((c) => c.id !== currency.id)\r\n  ),\r\n  on(CurrencyActions.addCurrency, (state, { currency }) => {\r\n    if (state.map(c => c.id).indexOf(currency.id) > -1) return state;\r\n\r\n    return [...state, currency];\r\n  })\r\n)"
                }
            ],
            "src/app/state/currencies.selectors.ts": [
                {
                    "name": "selectCurrencies",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/currencies.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ReadonlyArray<Currency>>('currencies')"
                },
                {
                    "name": "selectPortfolio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/currencies.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ReadonlyArray<Currency>>('portfolio')"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/interfaces/file.ts": [
                {
                    "name": "FileStatus",
                    "childs": [
                        {
                            "name": "Scheduled",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "scheduled"
                        },
                        {
                            "name": "Available",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "available"
                        },
                        {
                            "name": "Unknown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "unknown"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/interfaces/file.ts"
                }
            ],
            "src/app/components/checkbox/checkbox.model.ts": [
                {
                    "name": "MultiCheckboxState",
                    "childs": [
                        {
                            "name": "Empty",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "empty"
                        },
                        {
                            "name": "Disabled",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "disabled"
                        },
                        {
                            "name": "Full",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "full"
                        },
                        {
                            "name": "Partial",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "partial"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/checkbox/checkbox.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/crypto",
                        "pathMatch": "full"
                    },
                    {
                        "path": "crypto",
                        "component": "CryptoComponent",
                        "pathMatch": "full"
                    },
                    {
                        "path": "files",
                        "component": "FilesComponent",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "firebaseUiAuthConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Full",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Partial",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/status-indicator/status-indicator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusIndicatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/currency.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Currency",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/data-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/file.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "File",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/crypto/crypto-portfolio/crypto-portfolio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CryptoPortfolioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/crypto/crypto-randomizer/crypto-randomizer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CryptoRandomizerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/crypto/crypto-selector/crypto-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CryptoSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/crypto/crypto.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CryptoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/files/files.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilesComponent",
                "coveragePercent": 16,
                "coverageCount": "2/12",
                "status": "low"
            },
            {
                "filePath": "src/app/services/currency/currency.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CurrencyService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/services/files/files.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FilesService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/state/currencies.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CurrenciesApiActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/currencies.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CurrencyActions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/currencies.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currencyReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/currencies.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/currencies.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrencies",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/currencies.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPortfolio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/portfolio.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/portfolio.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "portfolioReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}